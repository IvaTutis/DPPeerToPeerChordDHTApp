package project_package.main.network.storage;

import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.Scanner;

import project_package.main.network.initializer.PeerNodeInitializer;
import project_package.main.network.PeerNode;
import project_package.main.tcp_info.config.TCPconfig;
import project_package.main.service.DataSenderService;
import project_package.main.thread.ServerThread;
import project_package.main.network.config.Config;
import project_package.main.service.IDService;
import project_package.main.service.LoggerService;

public class Storage extends PeerNode {

    private PeerNode queryNode;
    private static int hop = 0;

    public Storage(String host, int port) {
        super(host, port);
    }

    public synchronized boolean transfer(PeerNode n, File file, String fileName, int key) {
        boolean check = false;
        try {
            String[] fileNames = fileName.split("/");
            fileName = fileNames[fileNames.length - 1];

            DataSenderService sender = new DataSenderService(n);
            sender.sendData(TCPconfig.FILE_TRANSFER_REQUEST, this, file, fileName, key);
            wait();
            check = true;
        } catch (IOException e) {
            LoggerService.error(Storage.class, e.getMessage());
        } catch (InterruptedException e) {
            LoggerService.error(Storage.class, e.getMessage());
        }

        if (check) {
            LoggerService.info(Storage.class, "File has been stored on Node: " + n.getNickname());
        } else {
            LoggerService.error(Storage.class, "File transmitission failed");
        }
        return check;
    }

    public PeerNode lookupPeerNode(int key, PeerNode p) {
        PeerNode next = p;
        System.out.println("HOP: #" + hop);
        next.printNodeInfo();
        PeerNode[] ftNode = p.getFT();
        if (key == p.getID()) {
            hop++;
            return query(p);
        }
        if (isBetween(key, p.getID(), ftNode[1].getID(), false, false)) {
            next = query(ftNode[1]);
            hop++;
            return next;
        } else {
            for (int i = 0; i < ftNode.length - 1; i++) {
                if (isBetween(key, ftNode[i].getID(), ftNode[i + 1].getID(), true, false)
                        && ftNode[i].getID() != ftNode[i + 1].getID()) {
                    next = query(ftNode[i]);
                    hop++;
                    return lookupPeerNode(key, next);
                }
            }
            next = query(ftNode[ftNode.length - 1]);
            hop++;
            return lookupPeerNode(key, next);
        }
    }

    //naÄ‘i random peer network-a
    public synchronized PeerNode getRandPeerNode() {
        queryNode = null;
        try {
            DataSenderService sender = new DataSenderService(Config.DIS_HOST, Config.DIS_PORT);
            sender.sendData(TCPconfig.STORE_TO_DISCOVERY, this);
            wait();

        } catch (InterruptedException e) {
            LoggerService.error(Storage.class, e.getMessage());
        } catch (IOException e) {
            LoggerService.error(Storage.class, e.getMessage());
        }
        return queryNode;
    }

    public synchronized void sync(PeerNode p) {
        queryNode = p;
        notify();
    }

    public String toString() {
        return "[" + getHost() + "-" + getPort() + "]";
    }

    public static void initialize(String[] args) {

        // project_package.main.Storage [PORT] 0 -- file key is generated by MD5 hash
        // project_package.main.Storage [PORT] 1 -- file key is specified by argument
        if (args.length != 2) {
            LoggerService.error(PeerNodeInitializer.class, "project_package.main.network.storage.Storage [PORT] [KEY]");
            System.exit(-1);
        }

        Storage store = null;

        int port = Integer.parseInt(args[0]);

        try {
            String host = IDService.getHostName();
            store = new Storage(host, port);
            ServerThread serverThread = new ServerThread(store);
            serverThread.start();
            LoggerService.info(Storage.class, store.toString() + " listening");
        } catch (UnknownHostException e) {
            LoggerService.error(store.getClass(), e.getMessage());
        } catch (IOException e) {
            LoggerService.error(store.getClass(), e.getMessage());
        }

        Scanner scan = new Scanner(System.in);
        System.out.println("Please enter filename: [q! for exit]\n");
        String fileName = scan.next();

        while (!fileName.equalsIgnoreCase("q!")) {

            File file = new File(fileName);

            if (!file.exists() || file.isDirectory()) {
                LoggerService.error(Storage.class, "file doesn't exist\n");
            } else {

                // generate or specify file key
                int key = 0;

                if (args[1].equals("0")) {
                    String rawFileKey = IDService.generateFileKey(file);
                    key = Integer.parseInt(rawFileKey, 16);
                }

                else if (args[1].equals("1")) {
                    System.out.println("Please enter key: \n");
                    key = scan.nextInt();

                    // if key is out of range
                    if (key >= Math.pow(2, Config.ID_BIT_RANGE) || key < 0) {
                        LoggerService.error(Storage.class, "Invalid key. Please enter key:");
                        key = scan.nextInt();
                    }
                }

                // get random project_package.main.network
                PeerNode rand = store.query(store.getRandPeerNode());
                System.out.println("\nRANDOM NODE:");
                rand.printNodeInfo();

                LoggerService.info(Storage.class, "Key for file " + fileName + " is " + key);
                LoggerService.info(Storage.class, "Looking for the most suitable network to store...\n");

                // look for the most suitable project_package.main.network
                PeerNode result = store.lookupPeerNode(key, rand);
                System.out.println("Result network:");
                result.printNodeInfo();
                System.out.println("Number of hops: " + hop);
                hop = 0;

                // transfer file to result project_package.main.network
                boolean check = store.transfer(result, file, fileName, key);

            }
            System.out.println("\nPlease enter filename: [q! for exit]");
            fileName = scan.next();
        }

        System.exit(0);
    }

}
